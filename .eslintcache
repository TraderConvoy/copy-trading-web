[{"E:\\Freelancers\\copy-trading-web\\src\\index.tsx":"1","E:\\Freelancers\\copy-trading-web\\src\\lang\\index.ts":"2","E:\\Freelancers\\copy-trading-web\\src\\boot\\configureStore.ts":"3","E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\DocumentWidthContext.tsx":"4","E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\ToastContext.tsx":"5","E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\UrlImagesContext.tsx":"6","E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\ErrorContext.tsx":"7","E:\\Freelancers\\copy-trading-web\\src\\lang\\en\\index.ts":"8","E:\\Freelancers\\copy-trading-web\\src\\lang\\vi\\index.ts":"9","E:\\Freelancers\\copy-trading-web\\src\\screens\\screenSaga.tsx":"10","E:\\Freelancers\\copy-trading-web\\src\\containers\\redux\\common\\actions.ts":"11","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\reducers.tsx":"12","E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\actions.tsx":"13","E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\services.tsx":"14","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\actions.tsx":"15","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\index.tsx":"16","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\index.tsx":"17","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\ducks\\actions.ts":"18","E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\index.tsx":"19","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\index.tsx":"20","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\services.ts":"21","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\ducks\\actions.tsx":"22","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\components\\Overview.tsx":"23","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\components\\Transfer.tsx":"24","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\CustomerLayout.tsx":"25","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\components\\ModalTransfer.tsx":"26","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\components\\InvestmentHistoryItem.tsx":"27","E:\\Freelancers\\copy-trading-web\\src\\containers\\hooks\\useErrorContext.ts":"28","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Pagination.tsx":"29","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\ModalConfirm.tsx":"30","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Navbar.tsx":"31","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Buttons.tsx":"32","E:\\Freelancers\\copy-trading-web\\src\\App.tsx":"33","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\redux\\operations.ts":"34","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\ducks\\operations.tsx":"35","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\redux\\actions.ts":"36","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\redux\\actions.ts":"37","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\index.tsx":"38","E:\\Freelancers\\copy-trading-web\\src\\utils\\configServices.ts":"39","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\services.tsx":"40","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\components\\LoginForm.tsx":"41","E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\components\\TableYourHistory.tsx":"42","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\components\\ModalStartCopy.tsx":"43","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Loading.tsx":"44","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Sidebar.tsx":"45","E:\\Freelancers\\copy-trading-web\\src\\constant\\datatable.tsx":"46","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Toggle.tsx":"47","E:\\Freelancers\\copy-trading-web\\src\\routes\\index.tsx":"48","E:\\Freelancers\\copy-trading-web\\src\\containers\\redux\\common\\reducers.ts":"49","E:\\Freelancers\\copy-trading-web\\src\\screens\\screenReducers.tsx":"50","E:\\Freelancers\\copy-trading-web\\src\\constant\\localstore.ts":"51","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\operations.tsx":"52","E:\\Freelancers\\copy-trading-web\\src\\constant\\sidebar.ts":"53","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\ducks\\operations.ts":"54","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\services.ts":"55","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentCalculator\\index.tsx":"56","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\index.tsx":"57","E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\components\\TableTradingHistory.tsx":"58","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Header.tsx":"59","E:\\Freelancers\\copy-trading-web\\src\\utils\\utilities.ts":"60","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\services.ts":"61","E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\index.tsx":"62","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentCalculator\\components\\InvestmentCalculator.tsx":"63","E:\\Freelancers\\copy-trading-web\\src\\constant\\config.ts":"64","E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\reducers.tsx":"65","E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\operations.tsx":"66","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\redux\\operations.ts":"67","E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\index.tsx":"68","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\components\\LeaderInfo.tsx":"69","E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\components\\DoWantToExpert.tsx":"70","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\components\\TableTransferHistory.tsx":"71","E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\components\\TableProfitSharingHistory.tsx":"72","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\services.tsx":"73","E:\\Freelancers\\copy-trading-web\\src\\containers\\exception\\404\\index.tsx":"74","E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\components\\BecomeSuccess.tsx":"75"},{"size":556,"mtime":1606674595077,"results":"76","hashOfConfig":"77"},{"size":394,"mtime":1606226348174,"results":"78","hashOfConfig":"77"},{"size":2391,"mtime":1607168525345,"results":"79","hashOfConfig":"77"},{"size":674,"mtime":1606674595076,"results":"80","hashOfConfig":"77"},{"size":1029,"mtime":1606226348172,"results":"81","hashOfConfig":"77"},{"size":353,"mtime":1607137311267,"results":"82","hashOfConfig":"77"},{"size":2005,"mtime":1607168645102,"results":"83","hashOfConfig":"77"},{"size":72,"mtime":1606226348174,"results":"84","hashOfConfig":"77"},{"size":72,"mtime":1606226348175,"results":"85","hashOfConfig":"77"},{"size":620,"mtime":1607168645262,"results":"86","hashOfConfig":"77"},{"size":225,"mtime":1607168525348,"results":"87","hashOfConfig":"77"},{"size":442,"mtime":1607196011183,"results":"88","hashOfConfig":"77"},{"size":279,"mtime":1607168525358,"results":"89","hashOfConfig":"77"},{"size":261,"mtime":1607168525359,"results":"90","hashOfConfig":"77"},{"size":606,"mtime":1607196222394,"results":"91","hashOfConfig":"77"},{"size":223,"mtime":1607137311268,"results":"92","hashOfConfig":"77"},{"size":1484,"mtime":1607168525356,"results":"93","hashOfConfig":"77"},{"size":524,"mtime":1607168525352,"results":"94","hashOfConfig":"77"},{"size":3043,"mtime":1606840148446,"results":"95","hashOfConfig":"77"},{"size":4922,"mtime":1607168525353,"results":"96","hashOfConfig":"77"},{"size":228,"mtime":1607168525357,"results":"97","hashOfConfig":"77"},{"size":590,"mtime":1607168525350,"results":"98","hashOfConfig":"77"},{"size":1465,"mtime":1606840148448,"results":"99","hashOfConfig":"77"},{"size":3057,"mtime":1607168525356,"results":"100","hashOfConfig":"77"},{"size":617,"mtime":1607261413295,"results":"101","hashOfConfig":"77"},{"size":3298,"mtime":1607168525349,"results":"102","hashOfConfig":"77"},{"size":3219,"mtime":1607168525352,"results":"103","hashOfConfig":"77"},{"size":229,"mtime":1607156958181,"results":"104","hashOfConfig":"77"},{"size":3259,"mtime":1607168525347,"results":"105","hashOfConfig":"77"},{"size":1203,"mtime":1607168525346,"results":"106","hashOfConfig":"77"},{"size":2102,"mtime":1607253067143,"results":"107","hashOfConfig":"77"},{"size":846,"mtime":1607168525346,"results":"108","hashOfConfig":"77"},{"size":1954,"mtime":1606674595074,"results":"109","hashOfConfig":"77"},{"size":766,"mtime":1607168525354,"results":"110","hashOfConfig":"77"},{"size":2505,"mtime":1607168525350,"results":"111","hashOfConfig":"77"},{"size":221,"mtime":1607168525357,"results":"112","hashOfConfig":"77"},{"size":215,"mtime":1607168525354,"results":"113","hashOfConfig":"77"},{"size":2744,"mtime":1607168525353,"results":"114","hashOfConfig":"77"},{"size":1829,"mtime":1607196926178,"results":"115","hashOfConfig":"77"},{"size":998,"mtime":1607168525351,"results":"116","hashOfConfig":"77"},{"size":3101,"mtime":1607196784394,"results":"117","hashOfConfig":"77"},{"size":804,"mtime":1607168525358,"results":"118","hashOfConfig":"77"},{"size":12033,"mtime":1607231850561,"results":"119","hashOfConfig":"77"},{"size":385,"mtime":1607168525346,"results":"120","hashOfConfig":"77"},{"size":3139,"mtime":1607263922667,"results":"121","hashOfConfig":"77"},{"size":3339,"mtime":1607168525345,"results":"122","hashOfConfig":"77"},{"size":357,"mtime":1606674595075,"results":"123","hashOfConfig":"77"},{"size":2833,"mtime":1607169001982,"results":"124","hashOfConfig":"77"},{"size":385,"mtime":1607168525348,"results":"125","hashOfConfig":"77"},{"size":208,"mtime":1607168645253,"results":"126","hashOfConfig":"77"},{"size":336,"mtime":1606226348171,"results":"127","hashOfConfig":"77"},{"size":1121,"mtime":1607196619069,"results":"128","hashOfConfig":"77"},{"size":300,"mtime":1606840148443,"results":"129","hashOfConfig":"77"},{"size":2426,"mtime":1607168525352,"results":"130","hashOfConfig":"77"},{"size":220,"mtime":1607168525354,"results":"131","hashOfConfig":"77"},{"size":565,"mtime":1606674595081,"results":"132","hashOfConfig":"77"},{"size":618,"mtime":1606674595077,"results":"133","hashOfConfig":"77"},{"size":717,"mtime":1607168525351,"results":"134","hashOfConfig":"77"},{"size":551,"mtime":1606840148443,"results":"135","hashOfConfig":"77"},{"size":421,"mtime":1607168525361,"results":"136","hashOfConfig":"77"},{"size":818,"mtime":1607168525353,"results":"137","hashOfConfig":"77"},{"size":3947,"mtime":1607231850561,"results":"138","hashOfConfig":"77"},{"size":4327,"mtime":1607168525352,"results":"139","hashOfConfig":"77"},{"size":160,"mtime":1607168645047,"results":"140","hashOfConfig":"77"},{"size":337,"mtime":1607168525358,"results":"141","hashOfConfig":"77"},{"size":923,"mtime":1607168525358,"results":"142","hashOfConfig":"77"},{"size":809,"mtime":1607168525357,"results":"143","hashOfConfig":"77"},{"size":999,"mtime":1606840148445,"results":"144","hashOfConfig":"77"},{"size":1112,"mtime":1606674595082,"results":"145","hashOfConfig":"77"},{"size":1663,"mtime":1606674595078,"results":"146","hashOfConfig":"77"},{"size":722,"mtime":1607168525356,"results":"147","hashOfConfig":"77"},{"size":793,"mtime":1607168525351,"results":"148","hashOfConfig":"77"},{"size":356,"mtime":1607168645247,"results":"149","hashOfConfig":"77"},{"size":124,"mtime":1606226348172,"results":"150","hashOfConfig":"77"},{"size":684,"mtime":1606674595078,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"1r90fe4",{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"154"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"154"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"154"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"154"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"154"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"182"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"197"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"205"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"197"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"154"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"154"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"154"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"154"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"182"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"154"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Freelancers\\copy-trading-web\\src\\index.tsx",[],["323","324"],"E:\\Freelancers\\copy-trading-web\\src\\lang\\index.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\boot\\configureStore.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\DocumentWidthContext.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\ToastContext.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\UrlImagesContext.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\contexts\\ErrorContext.tsx",["325"],"import system from 'constant/localstore';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\n\ntype IContextProps = {\n  addError: (err: Response, message?: string | null) => void;\n};\n\nexport const ErrorContext = React.createContext<IContextProps>({\n  addError: (err: Response, message?: string | null) => ({ err, message }),\n});\n\nexport const ErrorContextProvider = ({ children }) => {\n  const history = useHistory();\n  const { i18n } = useTranslation();\n  const [errMess, setErrMess] = useState('');\n\n  useEffect(() => {\n    if (!!errMess) {\n      const timeout = setTimeout(() => setErrMess(''), [5000]);\n      return () => clearTimeout(timeout);\n    }\n  }, [errMess]);\n\n  const addError = async (err: Response, message: null) => {\n    if (message) {\n      setErrMess(message || '');\n      return;\n    }\n    if (err.status === system.RESPONSE_STATUS.NOT_FOUND)\n      setErrMess(\n        i18n.language === 'vi'\n          ? 'Máy chủ gặp sự cố, vui lòng liên hệ với quản trị viên'\n          : 'There is a problem with the server, please contact the administrator',\n      );\n\n    if (err.status === system.RESPONSE_STATUS.FORBIDDEN) {\n      localStorage.removeItem(system.TOKEN);\n      history.push('/copy-trading/login');\n    }\n\n    if (err.status === system.RESPONSE_STATUS.INTERVAL_SERVER) {\n      const error = await err.json();\n      setErrMess(error.error_description || message || '');\n    }\n  };\n\n  const contextValue = {\n    addError: useCallback((err, message) => addError(err, message), []),\n  };\n\n  return (\n    <ErrorContext.Provider value={contextValue}>\n      {children}\n      {errMess ? (\n        <div className=\"toasts-wrapper\">\n          <div className=\"toast error\">{errMess}</div>\n        </div>\n      ) : null}\n      {/* <div className=\"toasts-wrapper\">{errMess ? <div className=\"toast\">{errMess}</div> : null}</div> */}\n    </ErrorContext.Provider>\n  );\n};\n","E:\\Freelancers\\copy-trading-web\\src\\lang\\en\\index.ts",["326"],"import common from './common.json';\r\n\r\nexport default {\r\n  common,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\lang\\vi\\index.ts",["327"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\screenSaga.tsx",["328"],"// import commonSaga from '../containers/redux/operations';\nimport dashboardSaga from 'screens/dashboard/ducks/operations';\nimport investmentHistorySaga from 'screens/investmentHistory/ducks/operations';\nimport leaderDetailSaga from 'screens/leaderDetail/redux/operations';\nimport walletSaga from 'screens/wallet/redux/operations';\nimport userHistorySaga from '../screens/yourHistory/ducks/operations';\nimport loginSaga from './login/redux/operations';\n\nexport default {\n  // ...commonSaga,\n  ...dashboardSaga,\n  ...userHistorySaga,\n  ...investmentHistorySaga,\n  ...leaderDetailSaga,\n  ...loginSaga,\n  ...walletSaga,\n};\n","E:\\Freelancers\\copy-trading-web\\src\\containers\\redux\\common\\actions.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\reducers.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\actions.tsx",[],["329","330"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\services.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\actions.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\index.tsx",["331","332","333"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\ducks\\actions.ts",[],["334","335"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\index.tsx",["336","337"],"import { UrlImagesContext } from 'containers/contexts/UrlImagesContext';\r\nimport React, { useContext, useState } from 'react';\r\nimport TableProfitSharingHistory from './components/TableProfitSharingHistory';\r\nimport TableTradingHistory from './components/TableTradingHistory';\r\n\r\nconst tabs = {\r\n  TRADING_HISTORY: 'trading_history',\r\n  PROFIT_SHARING_HISTORY: 'profit_sharing_history',\r\n};\r\n\r\nconst fakeTradingHistory = {\r\n  time: '18/11/2020 - 18:20:39',\r\n  type: 'BTC/USDT',\r\n  order: 'buy',\r\n  open: '9,486.2 USDT',\r\n  close: '9,658.3 USDT',\r\n  investment: '100.00',\r\n  profit: '+95 USD',\r\n};\r\n\r\nconst fakeProfitSharingHistory = {\r\n  time: '18/11/2020 - 18:20:39',\r\n  type: 'BTC/USDT',\r\n  order: 'buy',\r\n  open: '9,486.2 USDT',\r\n  close: '9,658.3 USDT',\r\n  investment: '100.00',\r\n  profit_sharing: '+5 USD',\r\n  username: 'Donkin391',\r\n};\r\n\r\nconst ExpertManagement = () => {\r\n  const [tab, setTab] = useState(tabs.TRADING_HISTORY);\r\n  const urlImg = useContext(UrlImagesContext);\r\n\r\n  const fakeDataTradingHistory = Array(80).fill(fakeTradingHistory);\r\n  const fakeDataProfitSharingHistory = Array(90).fill(fakeProfitSharingHistory);\r\n\r\n  return (\r\n    <div className=\"expert-management\">\r\n      <div className=\"expert-management__header\">\r\n        <div className=\"title-wrapper\">\r\n          <p className=\"title\">Expert Management</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"expert-management__content\">\r\n        <div className=\"card-wrapper\">\r\n          <div className=\"start-copy-trade\">\r\n            <img src={`${urlImg}icons/start-copy-trade.svg`} />\r\n            <p>Start copy trade now to receive profit from all Copier who copy your trade</p>\r\n            <button>Start copy trade</button>\r\n          </div>\r\n          <div className=\"withdrawal\">\r\n            <img src={`${urlImg}icons/withdrawal.svg`} />\r\n            <div className=\"detail\">\r\n              <p>Total 5% profit sharing</p>\r\n              <p className=\"total\">$ 2116</p>\r\n            </div>\r\n            <button>withdrawal</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"tab-wrapper\">\r\n          <div className=\"tab__name\">\r\n            <p\r\n              className={`name ${tab === tabs.TRADING_HISTORY ? 'active' : ''}`}\r\n              onClick={() => setTab(tabs.TRADING_HISTORY)}\r\n            >\r\n              Trading history\r\n            </p>\r\n            <p\r\n              className={`name ${tab === tabs.PROFIT_SHARING_HISTORY ? 'active' : ''}`}\r\n              onClick={() => setTab(tabs.PROFIT_SHARING_HISTORY)}\r\n            >\r\n              Profit sharing history\r\n            </p>\r\n          </div>\r\n          <div className=\"tab__content\">\r\n            {tab === tabs.TRADING_HISTORY ? <TableTradingHistory data={fakeDataTradingHistory} /> : null}\r\n            {tab === tabs.PROFIT_SHARING_HISTORY ? (\r\n              <TableProfitSharingHistory data={fakeDataProfitSharingHistory} />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExpertManagement);\r\n",["338","339"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\index.tsx",["340"],"import Loading from 'containers/components/Loading';\r\nimport ModalConfirm, { initializeModal } from 'containers/components/ModalConfirm';\r\nimport Pagination from 'containers/components/Pagination';\r\nimport useError from 'containers/hooks/useErrorContext';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport InvestmentHistoryItem from './components/InvestmentHistoryItem';\r\nimport {\r\n  getListTradingCopyAction,\r\n  pauseTradingCopyAction,\r\n  resumeTradingCopyAction,\r\n  stopTradingCopyAction,\r\n} from './ducks/actions';\r\n\r\nconst initializePage = {\r\n  number: 1,\r\n  perPage: 6,\r\n};\r\n\r\nconst InvestmentHistory = () => {\r\n  const dispatch = useDispatch();\r\n  const [modalCf, setModalCf] = useState({ ...initializeModal });\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  const [data, setData] = useState({ data: [], count: 0 });\r\n  const [page, setPage] = useState({ ...initializePage });\r\n  const { addError } = useError();\r\n\r\n  useEffect(() => {\r\n    handleGetListTradingCopy();\r\n  }, [page]);\r\n\r\n  const closeModalConfirm = () => {\r\n    setModalCf({ ...initializeModal });\r\n  };\r\n\r\n  const handleGetListTradingCopy = () => {\r\n    setPageLoading(true);\r\n    const body = {\r\n      page: page.number,\r\n      size: page.perPage,\r\n    };\r\n    dispatch(\r\n      getListTradingCopyAction(body, (err, res: any) => {\r\n        if (err) addError(err, null);\r\n        else setData(res);\r\n        setPageLoading(false);\r\n      }),\r\n    );\r\n  };\r\n\r\n  const handlePageChange = (page: number) => {\r\n    setPage((oldState) => ({ ...oldState, number: page }));\r\n  };\r\n\r\n  const handleStop = (id_copy) => {\r\n    const body = {\r\n      id_copy,\r\n    };\r\n    setModalCf((oldState) => ({\r\n      ...oldState,\r\n      isOpen: true,\r\n      title: 'Confirm',\r\n      content: 'Are you sure you want to stop copy ?',\r\n      cancelContent: 'Cancel Stop',\r\n      submitContent: 'Stop',\r\n      handleCancel: () => closeModalConfirm(),\r\n      handleSubmit: () =>\r\n        dispatch(\r\n          stopTradingCopyAction(body, (err, res) => {\r\n            if (err) addError(err, null);\r\n            closeModalConfirm();\r\n            handlePageChange(1);\r\n          }),\r\n        ),\r\n    }));\r\n  };\r\n\r\n  const handleResume = (id_copy) => {\r\n    const body = {\r\n      id_copy,\r\n    };\r\n    setModalCf((oldState) => ({\r\n      ...oldState,\r\n      isOpen: true,\r\n      title: 'Confirm',\r\n      content: 'Are you sure you want to start copy ?',\r\n      cancelContent: 'Cancel Start',\r\n      submitContent: 'Start',\r\n      handleCancel: () => closeModalConfirm(),\r\n      handleSubmit: () =>\r\n        dispatch(\r\n          resumeTradingCopyAction(body, (err, res) => {\r\n            if (err) addError(err, null);\r\n            closeModalConfirm();\r\n            handlePageChange(1);\r\n          }),\r\n        ),\r\n    }));\r\n  };\r\n\r\n  const handlePause = (id_copy) => {\r\n    const body = {\r\n      id_copy,\r\n    };\r\n    setModalCf((oldState) => ({\r\n      ...oldState,\r\n      isOpen: true,\r\n      title: 'Confirm',\r\n      content: 'Are you sure you want to pause copy ?',\r\n      cancelContent: 'Cancel Pause',\r\n      submitContent: 'Pause',\r\n      handleCancel: () => closeModalConfirm(),\r\n      handleSubmit: () =>\r\n        dispatch(\r\n          pauseTradingCopyAction(body, (err, res) => {\r\n            if (err) addError(err, null);\r\n            closeModalConfirm();\r\n            handlePageChange(1);\r\n          }),\r\n        ),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ModalConfirm\r\n        isOpen={modalCf.isOpen}\r\n        title={modalCf.title}\r\n        content={modalCf.content}\r\n        cancelContent={modalCf.cancelContent}\r\n        submitContent={modalCf.submitContent}\r\n        handleCancel={modalCf.handleCancel}\r\n        handleSubmit={modalCf.handleSubmit}\r\n      />\r\n      <div className=\"investment-history\">\r\n        <div className=\"investment-history__header\">\r\n          <div className=\"title-wrapper\">\r\n            <p className=\"title\">Investment History</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"investment-history__content\">\r\n          <Loading isLoading={pageLoading}>\r\n            <div className=\"history-wrapper\">\r\n              {data.data.map((item: any) => {\r\n                return (\r\n                  <InvestmentHistoryItem\r\n                    handlePause={handlePause}\r\n                    handleStart={handleResume}\r\n                    handleStop={handleStop}\r\n                    key={item._id}\r\n                    item={item}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </Loading>\r\n          <Pagination\r\n            page={page.number}\r\n            perPage={page.perPage}\r\n            count={data.count}\r\n            pageChange={(page: number) => handlePageChange(page)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(InvestmentHistory);\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\services.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\ducks\\actions.tsx",[],["341","342"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\components\\Overview.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\components\\Transfer.tsx",["343"],"import { UrlImagesContext } from 'containers/contexts/UrlImagesContext';\r\nimport React, { useContext, useMemo, useState } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch } from 'react-redux';\r\nimport { transferAmountAction } from 'screens/dashboard/ducks/actions';\r\n\r\nconst Transfer = () => {\r\n  const dispatch = useDispatch();\r\n  const [transferValue, setTransferValue] = useState('');\r\n  const urlImg = useContext(UrlImagesContext);\r\n\r\n  const handleTransferValueChange = (value) => {\r\n    setTransferValue(value);\r\n  };\r\n\r\n  const validData = useMemo(() => {\r\n    if (!transferValue || parseFloat(transferValue) < 1000) return false;\r\n    return true;\r\n  }, [transferValue]);\r\n\r\n  const handleTransfer = () => {\r\n    //TODO: update service khi có api | should check  both server client update more than 1000\r\n    const body = {\r\n      // access_token: localStorage.getItem(system.TOKEN),\r\n      amount: transferValue,\r\n    };\r\n    alert(JSON.stringify(body));\r\n    return;\r\n    dispatch(transferAmountAction(body, (res) => {}));\r\n  };\r\n\r\n  return (\r\n    <div className=\"transfer\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-header\">\r\n          <div className=\"modal-name\">\r\n            <p>Transfer</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"content-wrapper\">\r\n            <div className=\"from-wrapper\">\r\n              <p className=\"name\">From</p>\r\n              <p className=\"account\">Real account</p>\r\n            </div>\r\n            <div className=\"to-wrapper\">\r\n              <p className=\"name\">To</p>\r\n              <p className=\"account\">Copy trade account</p>\r\n            </div>\r\n          </div>\r\n          <img src={`${urlImg}icons/transfer-icon.svg`} className=\"transfer-icon\" alt=\"transfer-icon\" />\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <div className=\"detail-wrapper\">\r\n            <p>Amount</p>\r\n            <div className=\"available-wrapper\">\r\n              <p className=\"available\">Available :</p>\r\n              <p className=\"number\">1000 USD</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"button-wrapper\">\r\n            <div className=\"input\">\r\n              <p className=\"currency\">USD</p>\r\n              {/* <input value={transferValue} onChange={(event) => handleTransferValueChange(event)} /> */}\r\n              <NumberFormat\r\n                thousandSeparator={true}\r\n                onValueChange={(values) => handleTransferValueChange(values.floatValue)}\r\n                decimalScale={2}\r\n                value={transferValue}\r\n              />\r\n            </div>\r\n            <div className=\"button\">\r\n              <button disabled={!validData} onClick={() => handleTransfer()}>\r\n                Transfer\r\n              </button>\r\n            </div>\r\n            <p className=\"alert-detail\">500 USD is minimum required deposit to start copy trade</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transfer;\r\n","E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\CustomerLayout.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\components\\ModalTransfer.tsx",["344"],"import system from 'constant/localstore';\r\nimport { UrlImagesContext } from 'containers/contexts/UrlImagesContext';\r\nimport React, { useContext, useMemo, useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch } from 'react-redux';\r\nimport { transferAmountAction } from '../ducks/actions';\r\nconst ModalTransfer = ({ isOpen, closeModal }) => {\r\n  const [transferValue, setTransferValue] = useState('');\r\n  const urlImg = useContext(UrlImagesContext);\r\n  const dispatch = useDispatch();\r\n  const handleTransfer = () => {\r\n    //TODO: update service khi có api | should check  both server client update more than 1000\r\n    let body = {\r\n      access_token: localStorage.getItem(system.TOKEN),\r\n      amount: transferValue,\r\n    };\r\n    alert(JSON.stringify(body));\r\n    return;\r\n    dispatch(transferAmountAction(body, (res) => {}));\r\n  };\r\n\r\n  const handleTransferValueChange = (value) => {\r\n    setTransferValue(value);\r\n  };\r\n\r\n  const validData = useMemo(() => {\r\n    if (!transferValue || parseFloat(transferValue) < 1000) return false;\r\n    return true;\r\n  }, [transferValue]);\r\n\r\n  return (\r\n    <Modal show={isOpen} onHide={() => closeModal()} className=\"transfer-modal\" size=\"lg\">\r\n      <Modal.Header>\r\n        <div className=\"modal-name\">\r\n          <p>Transfer</p>\r\n        </div>\r\n        <div className=\"close-wrapper\">\r\n          <button onClick={() => closeModal()}>\r\n            <img src={`${urlImg}icons/close.svg`} alt=\"close\" />\r\n          </button>\r\n        </div>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"content-wrapper\">\r\n          <div className=\"from-wrapper\">\r\n            <p className=\"name\">From</p>\r\n            <p className=\"account\">Real account</p>\r\n          </div>\r\n          <div className=\"to-wrapper\">\r\n            <p className=\"name\">To</p>\r\n            <p className=\"account\">Copy trade account</p>\r\n          </div>\r\n        </div>\r\n        <img src={`${urlImg}icons/transfer-icon.svg`} className=\"transfer-icon\" alt=\"transfer-icon\" />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div className=\"detail-wrapper\">\r\n          <p>Amount</p>\r\n          <div className=\"available-wrapper\">\r\n            <p className=\"available\">Available :</p>\r\n            <p className=\"number\">1000 USD</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"button-wrapper\">\r\n          <div className=\"input\">\r\n            <p className=\"currency\">USD</p>\r\n            {/* <input value={transferValue} onChange={(event) => handleTransferValueChange(event)} /> */}\r\n            <NumberFormat\r\n              thousandSeparator={true}\r\n              onValueChange={(values) => handleTransferValueChange(values.floatValue)}\r\n              prefix={'$'}\r\n              placeholder=\"$\"\r\n              decimalScale={2}\r\n              value={transferValue}\r\n            />\r\n          </div>\r\n          <div className=\"button\">\r\n            <button disabled={!validData} onClick={() => handleTransfer()}>\r\n              Transfer\r\n            </button>\r\n          </div>\r\n          <p className=\"alert-detail\">500 USD is minimum required deposit to start copy trade</p>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalTransfer;\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\components\\InvestmentHistoryItem.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\hooks\\useErrorContext.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Pagination.tsx",["345","346","347"],"E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\ModalConfirm.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Navbar.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Buttons.tsx",["348","349","350"],"import { UrlImagesContext } from 'containers/contexts/UrlImagesContext';\r\nimport React, { useContext } from 'react';\r\n\r\nexport const ButtonStart = ({ ...rest }) => {\r\n  const urlImg = useContext(UrlImagesContext);\r\n  return (\r\n    <button {...rest} className=\"button-start\">\r\n      <img src={`${urlImg}icons/start.svg`} />\r\n      Start\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const ButtonPause = ({ ...rest }) => {\r\n  const urlImg = useContext(UrlImagesContext);\r\n  return (\r\n    <button {...rest} className=\"button-pause\">\r\n      <img src={`${urlImg}icons/pause.svg`} />\r\n      Pause\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const ButtonStop = ({ ...rest }) => {\r\n  const urlImg = useContext(UrlImagesContext);\r\n  return (\r\n    <button {...rest} className=\"button-stop\">\r\n      <img src={`${urlImg}icons/stop.svg`} />\r\n      Stop\r\n    </button>\r\n  );\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\App.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\redux\\operations.ts",["351"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\ducks\\operations.tsx",["352"],"import { loadingOffAction, loadingOnAction } from 'containers/redux/common/actions';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { createTradingCopy, getDataExperts, getListTradingCopies, tranferAmountService } from '../services';\r\nimport {\r\n  createTradingCopyAction,\r\n  getListExpertsAction,\r\n  getListTradingCopiesAction,\r\n  setListExpertsAction,\r\n  transferAmountAction,\r\n} from './actions';\r\n\r\nfunction* getDataExpertsWatcher() {\r\n  yield takeLatest(getListExpertsAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(getDataExperts, payload.body);\r\n      if (result) {\r\n        yield put(setListExpertsAction(result.data));\r\n        if (payload.callback) payload.callback(null, result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nfunction* getListTradingCopiesWatcher() {\r\n  yield takeLatest(getListTradingCopiesAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(getListTradingCopies, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback(null, result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nfunction* createTradingCopyWatcher() {\r\n  yield takeLatest(createTradingCopyAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(createTradingCopy, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback(null, result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\nfunction* transferAmountWatcher() {\r\n  yield takeLatest(transferAmountAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(tranferAmountService, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback(null, result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  getDataExpertsWatcher,\r\n  getListTradingCopiesWatcher,\r\n  createTradingCopyWatcher,\r\n  transferAmountWatcher,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\redux\\actions.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\redux\\actions.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\index.tsx",["353","354","355"],"import Loading from 'containers/components/Loading';\r\nimport useError from 'containers/hooks/useErrorContext';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport TableLeaderHistory from 'screens/expertManagement/components/TableTradingHistory';\r\nimport LeaderInfo from './components/LeaderInfo';\r\nimport Overview from './components/Overview';\r\nimport { getLeaderDetailAction } from './redux/actions';\r\n\r\nconst tabs = {\r\n  OVERVIEW: 'overview',\r\n  LEADER_HISTORY: 'leader_history',\r\n};\r\n\r\nconst fakeData = {\r\n  time: '18/11/2020 - 18:20:39',\r\n  type: 'BTC/USDT',\r\n  order: 'buy',\r\n  open: '9,486.2 USDT',\r\n  close: '9,658.3 USDT',\r\n  investment: '100.00',\r\n  profit: '+95 USD',\r\n};\r\n\r\nconst LeaderDetail = () => {\r\n  const [data, setData] = useState({});\r\n  const [loadingPage, setLoadingPage] = useState(true);\r\n  const [tab, setTab] = useState(tabs.OVERVIEW);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { addError } = useError();\r\n  const { leaderID }: any = useParams();\r\n\r\n  useEffect(() => {\r\n    handleGetLeaderDetail();\r\n  }, []);\r\n\r\n  const handleGetLeaderDetail = () => {\r\n    setLoadingPage(true);\r\n    const body = {\r\n      id_expert: leaderID,\r\n    };\r\n    dispatch(\r\n      getLeaderDetailAction(body, (err, res) => {\r\n        if (err) addError(err, null);\r\n        else {\r\n          console.log(res);\r\n          setLoadingPage(false);\r\n        }\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Loading isLoading={loadingPage}>\r\n      <div className=\"leader-detail\">\r\n        <div className=\"leader-detail__header\">\r\n          <div className=\"title-wrapper\">\r\n            <p onClick={() => history.push('/copy-tradding')}>Back</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"leader-detail__content\">\r\n          <LeaderInfo />\r\n          <div className=\"tab-wrapper\">\r\n            <div className=\"tab-names\">\r\n              <p className={`tab ${tab === tabs.OVERVIEW ? 'active' : ''}`} onClick={() => setTab(tabs.OVERVIEW)}>\r\n                Overview\r\n              </p>\r\n              <p\r\n                className={`tab ${tab === tabs.LEADER_HISTORY ? 'active' : ''}`}\r\n                onClick={() => setTab(tabs.LEADER_HISTORY)}\r\n              >\r\n                Leader History\r\n              </p>\r\n            </div>\r\n            <div className=\"tab-content\">\r\n              {tab === tabs.OVERVIEW ? <Overview /> : null}\r\n              {tab === tabs.LEADER_HISTORY ? <TableLeaderHistory data={Array(99).fill(fakeData)} /> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default React.memo(LeaderDetail);\r\n","E:\\Freelancers\\copy-trading-web\\src\\utils\\configServices.ts",["356"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\services.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\components\\LoginForm.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\components\\TableYourHistory.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\components\\ModalStartCopy.tsx",["357"],"import Toggle from 'containers/components/Toggle';\r\nimport { UrlImagesContext } from 'containers/contexts/UrlImagesContext';\r\nimport useError from 'containers/hooks/useErrorContext';\r\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { Col, Container, Modal, Row } from 'react-bootstrap';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getErrMessage } from 'utils/utilities';\r\nimport { createTradingCopyAction } from '../ducks/actions';\r\n\r\nconst initializeData = {\r\n  investment_amount: '',\r\n  maximum_rate: '',\r\n  stop_loss: '',\r\n  taken_profit: '',\r\n};\r\n\r\nconst ModalStartCopy = ({ isOpen, closeModal, detail, setShowModalTf }) => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state: any) => state.common.loading);\r\n  const { addError } = useError();\r\n  const [haveMaximum, setHaveHaximum] = useState(false);\r\n  const [haveStopLoss, setHaveStopLoss] = useState(false);\r\n  const [haveTakeProfit, setHaveTakeProfit] = useState(false);\r\n  const [data, setData] = useState({ ...initializeData });\r\n  const [isMaxRate, setMaxRate] = useState(false);\r\n  const [isStopLoss, setStopLoss] = useState(false);\r\n  const [isTakeProfit, setTakeProfit] = useState(false);\r\n  const [isNotHaveAmount, setIsNotHaveAmount] = useState(false);\r\n  const [isVaidate, setisVaidate] = useState(false);\r\n  useEffect(() => {\r\n    if (!isOpen) clearModal();\r\n  }, [isOpen]);\r\n\r\n  const urlImg = useContext(UrlImagesContext);\r\n  const handleCreateTradingCopy = () => {\r\n    setIsNotHaveAmount(false);\r\n    const body = {\r\n      id_expert: detail.expert._id,\r\n      investment_amount: parseFloat(data.investment_amount),\r\n      maximum_rate: haveMaximum ? data.maximum_rate : 0,\r\n      has_maximum_rate: haveMaximum,\r\n      stop_loss: haveStopLoss ? data.stop_loss : 0,\r\n      has_stop_loss: haveStopLoss,\r\n      taken_profit: haveTakeProfit ? data.taken_profit : 0,\r\n      has_taken_profit: haveTakeProfit,\r\n    };\r\n    dispatch(\r\n      createTradingCopyAction(body, async (err, res: any) => {\r\n        if (err) {\r\n          const message = await getErrMessage(err, null);\r\n          if (message.indexOf('Account does not have enough money!') !== -1) {\r\n            setIsNotHaveAmount(true);\r\n            clearModal();\r\n            setTimeout(() => {\r\n              closeModal();\r\n              setShowModalTf(true);\r\n            }, 300);\r\n            return;\r\n          }\r\n          addError(err, message ? message : null);\r\n        } else {\r\n          //:FIXME: show message success rồi close modal\r\n          closeModal();\r\n          clearModal();\r\n        }\r\n      }),\r\n    );\r\n  };\r\n\r\n  const handleInputChange = (name, value) => {\r\n    setData((oldState) => ({ ...oldState, [name]: value }));\r\n  };\r\n\r\n  const clearModal = () => {\r\n    setHaveHaximum(false);\r\n    setHaveStopLoss(false);\r\n    setHaveTakeProfit(false);\r\n    setData({ ...initializeData });\r\n  };\r\n\r\n  const validData: boolean = useMemo(() => {\r\n    if (!data.investment_amount || parseFloat(data.investment_amount) < 500) return false;\r\n    return true;\r\n  }, [data, haveMaximum, haveStopLoss, haveTakeProfit]);\r\n\r\n  const handleTypeChange = async (value, type) => {\r\n    switch (type) {\r\n      case 'haveMaximum':\r\n        await setHaveHaximum(!value);\r\n        validateHandle('maximum_rate', data.maximum_rate, value);\r\n        break;\r\n      case 'haveStopLoss':\r\n        await setHaveStopLoss(!value);\r\n        validateHandle('stop_loss', data.stop_loss, value);\r\n        break;\r\n      case 'haveTakeProfit':\r\n        await setHaveTakeProfit(!value);\r\n        validateHandle('taken_profit', data.taken_profit, value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    console.log(haveMaximum);\r\n  };\r\n\r\n  const validateHandle = (type, values, isReturn?) => {\r\n    const value = parseFloat(values);\r\n    setisVaidate(false);\r\n    if (!data.investment_amount || parseFloat(data.investment_amount) < 500) {\r\n      setisVaidate(true);\r\n      return;\r\n    }\r\n    switch (type) {\r\n      case 'maximum_rate':\r\n        setMaxRate(false);\r\n        if (isReturn) return;\r\n        if (value > 50 || value < 1) {\r\n          setisVaidate(true);\r\n          setMaxRate(true);\r\n        }\r\n        break;\r\n      case 'stop_loss':\r\n        setStopLoss(false);\r\n        if (isReturn) return;\r\n        if (value > 100 || value < 10) {\r\n          setisVaidate(true);\r\n          setStopLoss(true);\r\n        }\r\n        break;\r\n      case 'taken_profit':\r\n        setTakeProfit(false);\r\n        if (isReturn) return;\r\n        if (value < 150) {\r\n          setisVaidate(true);\r\n          setTakeProfit(true);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (isMaxRate || isStopLoss || isTakeProfit) {\r\n      setisVaidate(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal show={isOpen} onHide={() => closeModal()} className=\"start-copy-modal\" size=\"lg\">\r\n      <Modal.Header>\r\n        <div className=\"wrapper-left\">\r\n          <div className=\"info-wrapper\">\r\n            <div className=\"avatar-wrapper\">\r\n              <div className=\"avatar\">\r\n                {detail.expert?.avatar ? (\r\n                  <img src={detail.expert.avatar} alt=\"avatar\" />\r\n                ) : detail.expert?.fullname ? (\r\n                  <p>{detail.expert.fullname.split('')[0]}</p>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n            <div className=\"name-wrapper\">\r\n              <p className=\"name\">{detail.expert?.fullname}</p>\r\n              <p className=\"sub\">\r\n                <span className=\"expert\">Expert</span>\r\n                <span className=\"percent\">5%</span>\r\n                Profit sharing\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"wrapper-right\">\r\n          <div className=\"close-wrapper\">\r\n            <button onClick={() => closeModal()}>\r\n              <img src={`${urlImg}icons/close.svg`} alt=\"close\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col md={true} className=\"wrapper-left\">\r\n              <p className=\"title\">Start Copy Now</p>\r\n              <div className=\"amount-wrapper\">\r\n                <p>Amount of investment</p>\r\n                <div className=\"input-wrapper\">\r\n                  <p className=\"currency\">USD</p>\r\n                  <NumberFormat\r\n                    thousandSeparator={true}\r\n                    onValueChange={(values) => handleInputChange('investment_amount', values.floatValue)}\r\n                    onBlur={(event) => validateHandle('maximum_rate', event.target.value)}\r\n                    prefix={'$'}\r\n                    placeholder=\"$\"\r\n                    decimalScale={2}\r\n                    value={data.investment_amount}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"wallet-wrapper\">\r\n                <p className=\"total-wallet\">\r\n                  Total wallet: <span>500 USD</span>\r\n                </p>\r\n                <p className=\"sub\">500 USD is mininum required deposit for this trader</p>\r\n                <br />\r\n                {isNotHaveAmount && <div className=\"invalid-feedback block\">Account does not have enough money!</div>}\r\n              </div>\r\n              {/* <div className=\"advance-wrapper\">\r\n                <button />\r\n                <p>Advance setting</p>\r\n              </div> */}\r\n            </Col>\r\n            <Col md={true} className=\"wrapper-right\">\r\n              <div className=\"advance-wrapper\">\r\n                <p>Advance setting</p>\r\n                <p>1 USD is mininum required to start copy</p>\r\n              </div>\r\n              <div className=\"input-wrapper maxinum\">\r\n                <div className=\"__header\">\r\n                  <p>Maximum</p>\r\n                  <Toggle\r\n                    active={haveMaximum}\r\n                    onClick={(value: boolean) => handleTypeChange(haveMaximum, 'haveMaximum')}\r\n                  />\r\n                </div>\r\n                <div className=\"__input\">\r\n                  {/* <input\r\n                    // disabled={!haveMaximum}\r\n                    type=\"number\"\r\n                    max=\"50\"\r\n                    value={data.maximum_rate}\r\n                    onChange={(event) => handleInputChange('maximum_rate', event.target.value)}\r\n                  /> */}\r\n                  <NumberFormat\r\n                    disabled={!haveMaximum}\r\n                    onValueChange={(values) => handleInputChange('maximum_rate', values.floatValue)}\r\n                    onBlur={(event) => validateHandle('maximum_rate', event.target.value)}\r\n                    placeholder=\"%\"\r\n                    suffix={'%'}\r\n                    value={data.maximum_rate}\r\n                  />\r\n                  {isMaxRate && <div className=\"invalid-feedback block\">Maximum is 50%</div>}\r\n                </div>\r\n              </div>\r\n              <div className=\"input-wrapper stop-loss\">\r\n                <div className=\"__header\">\r\n                  <p>Stop loss</p>\r\n                  <Toggle\r\n                    active={haveStopLoss}\r\n                    onClick={(value: boolean) => handleTypeChange(haveStopLoss, 'haveStopLoss')}\r\n                  />\r\n                </div>\r\n                <div className=\"__input\">\r\n                  {/* <input\r\n                    // disabled={!haveStopLoss}\r\n                    min=\"10\"\r\n                    value={data.stop_loss}\r\n                    type=\"number\"\r\n                    onChange={(event) => handleInputChange('stop_loss', event.target.value)}\r\n                  /> */}\r\n                  <NumberFormat\r\n                    disabled={!haveStopLoss}\r\n                    onValueChange={(values) => handleInputChange('stop_loss', values.floatValue)}\r\n                    onBlur={(event) => validateHandle('stop_loss', event.target.value)}\r\n                    placeholder=\"%\"\r\n                    suffix={'%'}\r\n                    value={data.stop_loss}\r\n                  />\r\n                  {isStopLoss && (\r\n                    <div className=\"invalid-feedback block\">Stop loss is more than 10% and less than 100</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"input-wrapper take-profit\">\r\n                <div className=\"__header\">\r\n                  <p>Take profit</p>\r\n                  <Toggle\r\n                    active={haveTakeProfit}\r\n                    onClick={(value: boolean) => handleTypeChange(haveTakeProfit, 'haveTakeProfit')}\r\n                  />\r\n                </div>\r\n                <div className=\"__input\">\r\n                  {/* <input\r\n                    // disabled={!haveTakeProfit}\r\n                    min=\"150\"\r\n                    value={data.taken_profit}\r\n                    type=\"number\"\r\n                    onChange={(event) => handleInputChange('taken_profit', event.target.value)}\r\n                  /> */}\r\n                  <NumberFormat\r\n                    disabled={!haveTakeProfit}\r\n                    onValueChange={(values) => handleInputChange('taken_profit', values.floatValue)}\r\n                    onBlur={(event) => validateHandle('taken_profit', event.target.value)}\r\n                    placeholder=\"%\"\r\n                    suffix={'%'}\r\n                    value={data.taken_profit}\r\n                  />\r\n                  {isTakeProfit && <div className=\"invalid-feedback block\">Take profit is more than 150%</div>}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div className=\"button-wrapper\">\r\n          <button disabled={isVaidate || !validData || loading} onClick={() => handleCreateTradingCopy()}>\r\n            Start Copy\r\n          </button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalStartCopy;\r\n","E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Loading.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Sidebar.tsx",["358"],"E:\\Freelancers\\copy-trading-web\\src\\constant\\datatable.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\components\\Toggle.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\routes\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\redux\\common\\reducers.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\screenReducers.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\constant\\localstore.ts",["359"],"const INVALID_TOKEN = 'INVALID_TOKEN';\r\n\r\nconst RESPONSE_STATUS = {\r\n  SUCESS: 200,\r\n  NOT_FOUND: 404,\r\n  INTERVAL_SERVER: 500,\r\n  FORBIDDEN: 403,\r\n};\r\n\r\nconst TOKEN = '@@token';\r\n\r\nconst LANG = '@@lang';\r\n\r\nconst USER_INFO = '@@userInfo';\r\n\r\nexport default {\r\n  INVALID_TOKEN,\r\n  RESPONSE_STATUS,\r\n  TOKEN,\r\n  LANG,\r\n  USER_INFO,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\redux\\operations.tsx",["360"],"import system from 'constant/localstore';\nimport { loadingOffAction, loadingOnAction } from 'containers/redux/common/actions';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { getUserById, loginActionService } from '../services';\nimport { loginAction, setUserInforAction } from './actions';\n\nfunction* LogInActionWatcher() {\n  yield takeLatest(loginAction, function* ({ payload }) {\n    try {\n      yield put(loadingOnAction());\n      const { body } = payload;\n      const result = yield call(loginActionService, body);\n      if (result) {\n        localStorage.setItem(system.TOKEN, result.access_token);\n        const userInfor = yield call(getUserById);\n        if (userInfor.data) {\n          yield put(setUserInforAction(userInfor.data));\n          if (payload.callback) payload.callback(null, userInfor.data);\n        } else {\n          if (payload.callback) payload.callback(null, null);\n        }\n      }\n    } catch (error) {\n      if (payload.callback) payload.callback(error, {});\n    } finally {\n      yield put(loadingOffAction());\n    }\n  });\n}\n\nexport default {\n  LogInActionWatcher,\n};\n","E:\\Freelancers\\copy-trading-web\\src\\constant\\sidebar.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\ducks\\operations.ts",["361"],"import { loadingOffAction, loadingOnAction } from 'containers/redux/common/actions';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { getListTradingCopies, pauseTradingCopy, resumeTradingCopy, stopTradingCopy } from '../services';\r\nimport {\r\n  getListTradingCopyAction,\r\n  pauseTradingCopyAction,\r\n  resumeTradingCopyAction,\r\n  stopTradingCopyAction,\r\n} from './actions';\r\n\r\nfunction* getListTradingCopyWatcher() {\r\n  yield takeLatest(getListTradingCopyAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(getListTradingCopies, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback('', result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nfunction* resumeTradingCopyWatcher() {\r\n  yield takeLatest(resumeTradingCopyAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(resumeTradingCopy, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback('', result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nfunction* pauseTradingCopyWatcher() {\r\n  yield takeLatest(pauseTradingCopyAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(pauseTradingCopy, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback('', result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nfunction* stopTradingCopyWatcher() {\r\n  yield takeLatest(stopTradingCopyAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const result = yield call(stopTradingCopy, payload.body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback('', result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback('Server Error', {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  getListTradingCopyWatcher,\r\n  pauseTradingCopyWatcher,\r\n  stopTradingCopyWatcher,\r\n  resumeTradingCopyWatcher,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\services.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentCalculator\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\components\\TableTradingHistory.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\layout\\Header.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\utils\\utilities.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentHistory\\services.ts",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\dashboard\\index.tsx",["362"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\investmentCalculator\\components\\InvestmentCalculator.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\constant\\config.ts",["363"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\reducers.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\yourHistory\\ducks\\operations.tsx",["364"],"// import { call, put, takeLatest } from '@redux-saga/core/effects';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { getUserHistoryService } from '../services';\r\nimport { getUserHistoryAction, setUserHistoryAction } from './actions';\r\nfunction* getUserHistoryWatcher() {\r\n  yield takeLatest(getUserHistoryAction, function* ({ payload }) {\r\n    try {\r\n      // yield put(onLoadingAction());\r\n      // yield put(logErrorAction(false, ''));\r\n      const { body, callback } = payload;\r\n      const result = yield call(getUserHistoryService, body);\r\n      if (result) {\r\n        yield put(setUserHistoryAction(result.data));\r\n        if (callback) {\r\n          yield call(callback(true));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // yield put(logErrorAction(true, ''));\r\n    } finally {\r\n      // yield put(offLoadingAction());\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  getUserHistoryWatcher,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\redux\\operations.ts",["365"],"import { loadingOffAction, loadingOnAction } from 'containers/redux/common/actions';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { getTransferHistory } from '../services';\r\nimport { getTransferHistoryAction } from './actions';\r\n\r\nfunction* getTransferHistoryWatcher() {\r\n  yield takeLatest(getTransferHistoryAction, function* ({ payload }) {\r\n    try {\r\n      yield put(loadingOnAction());\r\n      const { body } = payload;\r\n      const result = yield call(getTransferHistory, body);\r\n      if (result) {\r\n        if (payload.callback) payload.callback(null, result);\r\n      }\r\n    } catch (error) {\r\n      if (payload.callback) payload.callback(error, {});\r\n    } finally {\r\n      yield put(loadingOffAction());\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  getTransferHistoryWatcher,\r\n};\r\n","E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\leaderDetail\\components\\LeaderInfo.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\components\\DoWantToExpert.tsx",["366","367","368","369"],"E:\\Freelancers\\copy-trading-web\\src\\screens\\wallet\\components\\TableTransferHistory.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\expertManagement\\components\\TableProfitSharingHistory.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\login\\services.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\containers\\exception\\404\\index.tsx",[],"E:\\Freelancers\\copy-trading-web\\src\\screens\\becomeAnExpert\\components\\BecomeSuccess.tsx",[],{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"374","severity":1,"message":"375","line":50,"column":69,"nodeType":"376","endLine":50,"endColumn":71,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":3,"column":1,"nodeType":"380","endLine":5,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":3,"column":1,"nodeType":"380","endLine":5,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":9,"column":1,"nodeType":"380","endLine":17,"endColumn":3},{"ruleId":"370","replacedBy":"381"},{"ruleId":"372","replacedBy":"382"},{"ruleId":"383","severity":1,"message":"384","line":17,"column":10,"nodeType":"385","messageId":"386","endLine":17,"endColumn":21},{"ruleId":"383","severity":1,"message":"387","line":17,"column":23,"nodeType":"385","messageId":"386","endLine":17,"endColumn":37},{"ruleId":"383","severity":1,"message":"388","line":18,"column":9,"nodeType":"385","messageId":"386","endLine":18,"endColumn":17},{"ruleId":"370","replacedBy":"389"},{"ruleId":"372","replacedBy":"390"},{"ruleId":"391","severity":1,"message":"392","line":49,"column":13,"nodeType":"393","endLine":49,"endColumn":64},{"ruleId":"391","severity":1,"message":"392","line":54,"column":13,"nodeType":"393","endLine":54,"endColumn":58},{"ruleId":"370","replacedBy":"394"},{"ruleId":"372","replacedBy":"395"},{"ruleId":"374","severity":1,"message":"396","line":30,"column":6,"nodeType":"376","endLine":30,"endColumn":12,"suggestions":"397"},{"ruleId":"370","replacedBy":"398"},{"ruleId":"372","replacedBy":"399"},{"ruleId":"400","severity":1,"message":"401","line":29,"column":5,"nodeType":"402","messageId":"403","endLine":29,"endColumn":55},{"ruleId":"400","severity":1,"message":"401","line":20,"column":5,"nodeType":"402","messageId":"403","endLine":20,"endColumn":55},{"ruleId":"404","severity":1,"message":"405","line":21,"column":7,"nodeType":"385","messageId":"406","endLine":21,"endColumn":17},{"ruleId":"407","severity":1,"message":"408","line":68,"column":35,"nodeType":"409","messageId":"410","endLine":68,"endColumn":42},{"ruleId":"407","severity":1,"message":"408","line":69,"column":47,"nodeType":"409","messageId":"410","endLine":69,"endColumn":54},{"ruleId":"391","severity":1,"message":"392","line":8,"column":7,"nodeType":"393","endLine":8,"endColumn":47},{"ruleId":"391","severity":1,"message":"392","line":18,"column":7,"nodeType":"393","endLine":18,"endColumn":47},{"ruleId":"391","severity":1,"message":"392","line":28,"column":7,"nodeType":"393","endLine":28,"endColumn":46},{"ruleId":"378","severity":1,"message":"379","line":22,"column":1,"nodeType":"380","endLine":24,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":76,"column":1,"nodeType":"380","endLine":81,"endColumn":3},{"ruleId":"383","severity":1,"message":"411","line":27,"column":10,"nodeType":"385","messageId":"386","endLine":27,"endColumn":14},{"ruleId":"383","severity":1,"message":"412","line":27,"column":16,"nodeType":"385","messageId":"386","endLine":27,"endColumn":23},{"ruleId":"374","severity":1,"message":"413","line":38,"column":6,"nodeType":"376","endLine":38,"endColumn":8,"suggestions":"414"},{"ruleId":"378","severity":1,"message":"379","line":48,"column":1,"nodeType":"380","endLine":48,"endColumn":44},{"ruleId":"374","severity":1,"message":"415","line":85,"column":6,"nodeType":"376","endLine":85,"endColumn":55,"suggestions":"416"},{"ruleId":"391","severity":1,"message":"392","line":60,"column":9,"nodeType":"393","endLine":60,"endColumn":48},{"ruleId":"378","severity":1,"message":"379","line":16,"column":1,"nodeType":"380","endLine":22,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":31,"column":1,"nodeType":"380","endLine":33,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":75,"column":1,"nodeType":"380","endLine":80,"endColumn":3},{"ruleId":"374","severity":1,"message":"417","line":31,"column":6,"nodeType":"376","endLine":31,"endColumn":12,"suggestions":"418"},{"ruleId":"378","severity":1,"message":"379","line":1,"column":1,"nodeType":"380","endLine":5,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":26,"column":1,"nodeType":"380","endLine":28,"endColumn":3},{"ruleId":"378","severity":1,"message":"379","line":23,"column":1,"nodeType":"380","endLine":25,"endColumn":3},{"ruleId":"404","severity":1,"message":"419","line":8,"column":7,"nodeType":"385","messageId":"406","endLine":8,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":23,"column":15,"nodeType":"393","endLine":23,"endColumn":64},{"ruleId":"391","severity":1,"message":"392","line":29,"column":15,"nodeType":"393","endLine":29,"endColumn":64},{"ruleId":"391","severity":1,"message":"392","line":35,"column":15,"nodeType":"393","endLine":35,"endColumn":64},"no-native-reassign",["420"],"no-negated-in-lhs",["421"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'addError'. Either include it or remove the dependency array.","ArrayExpression",["422"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["420"],["421"],"@typescript-eslint/no-unused-vars","'dataHistory' is assigned a value but never used.","Identifier","unusedVar","'setDataHistory' is assigned a value but never used.","'dispatch' is assigned a value but never used.",["420"],["421"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["420"],["421"],"React Hook useEffect has a missing dependency: 'handleGetListTradingCopy'. Either include it or remove the dependency array.",["423"],["420"],["421"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","@typescript-eslint/no-redeclare","'Pagination' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleGetLeaderDetail'. Either include it or remove the dependency array.",["424"],"React Hook useMemo has unnecessary dependencies: 'haveMaximum', 'haveStopLoss', and 'haveTakeProfit'. Either exclude them or remove the dependency array.",["425"],"React Hook useEffect has a missing dependency: 'handleGetListExpert'. Either include it or remove the dependency array.",["426"],"'DoWantToExpert' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},"Update the dependencies array to be: [addError]",{"range":"437","text":"438"},"Update the dependencies array to be: [handleGetListTradingCopy, page]",{"range":"439","text":"440"},"Update the dependencies array to be: [handleGetLeaderDetail]",{"range":"441","text":"442"},"Update the dependencies array to be: [data]",{"range":"443","text":"444"},"Update the dependencies array to be: [handleGetListExpert, page]",{"range":"445","text":"446"},[1604,1606],"[addError]",[1049,1055],"[handleGetListTradingCopy, page]",[1181,1183],"[handleGetLeaderDetail]",[3128,3177],"[data]",[1431,1437],"[handleGetListExpert, page]"]